// Generated by CoffeeScript 2.0.0-beta9-dev
var additionalArgs, CoffeeScript, cscodegen, escodegen, esmangle, fs, inputSourceChooser, inspect, knownOpts, nopt, optAliases, option, options, parameter, pkg, positionalArgs, Repl;
fs = require('fs');
CoffeeScript = require('./module');
Repl = require('./repl');
nopt = require('nopt');
cscodegen = function () {
  try {
    return require('cscodegen');
  } catch (e$) {
    return;
  }
}.call(this);
escodegen = function () {
  try {
    return require('escodegen');
  } catch (e$1) {
    return;
  }
}.call(this);
esmangle = function () {
  try {
    return require('esmangle');
  } catch (e$2) {
    return;
  }
}.call(this);
inspect = function (o) {
  return require('util').inspect(o, false, 9e9, true);
};
knownOpts = {};
option = function () {
  var o;
  for (var i$ = 0, length$ = arguments.length; i$ < length$; ++i$) {
    o = arguments[i$];
    knownOpts[o] = Boolean;
  }
};
parameter = function () {
  var p;
  for (var i$ = 0, length$ = arguments.length; i$ < length$; ++i$) {
    p = arguments[i$];
    knownOpts[p] = String;
  }
};
optAliases = {
  b: '--bare',
  c: '--compile',
  e: '--eval',
  f: '--cscodegen',
  I: '--require',
  i: '--input',
  j: '--js',
  l: '--literate',
  m: '--minify',
  o: '--output',
  p: '--parse',
  v: '--version',
  w: '--watch'
};
option('parse', 'compile', 'optimise', 'debug', 'literate', 'raw', 'version', 'help');
parameter('cli', 'input', 'nodejs', 'output', 'watch');
if (null != escodegen) {
  option('bare', 'js', 'source-map', 'eval', 'repl');
  parameter('source-map-file', 'require');
  if (null != esmangle)
    option('minify');
}
if (null != cscodegen)
  option('cscodegen');
options = nopt(knownOpts, optAliases, process.argv, 2);
positionalArgs = options.argv.remain;
delete options.argv;
if (null != options.optimise)
  options.optimise;
else
  options.optimise = true;
options.sourceMap = options['source-map'];
options.sourceMapFile = options['source-map-file'];
options.fragmented = true;
if (!(options.compile || options.js || options.sourceMap || options.parse || options['eval'] || options.cscodegen))
  if (!(null != escodegen)) {
    options.compile = true;
  } else if (positionalArgs.length) {
    options['eval'] = true;
    options.input = positionalArgs.shift();
    additionalArgs = positionalArgs;
  } else {
    options.repl = true;
  }
require('./cli-exclusions')(options);
if (options.help)
  require('./cli-help');
if (options.version) {
  pkg = require('./../package.json');
  console.log('CoffeeScript version ' + pkg.version);
} else if (options.repl) {
  CoffeeScript.register();
  process.argv.shift();
  Repl.start();
} else {
  inputSourceChooser = require('./cli-input-source-chooser');
  inputSourceChooser.choose(options);
}
