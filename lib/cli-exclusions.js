// Generated by CoffeeScript 2.0.0-beta9-dev
var fs;
fs = require('fs');
module.exports = function (options) {
  var cache$;
  if (1 !== (null != options.parse ? options.parse : 0) + (null != options.compile ? options.compile : 0) + (null != options.js ? options.js : 0) + (null != options.sourceMap ? options.sourceMap : 0) + (null != options['eval'] ? options['eval'] : 0) + (null != options.cscodegen ? options.cscodegen : 0) + (null != options.repl ? options.repl : 0)) {
    console.error('Error: At most one of --parse (-p), --compile (-c), --js (-j), --source-map, --eval (-e), --cscodegen, or --repl may be used.');
    process.exit(1);
  }
  if (1 < (null != options.input) + (null != options.watch) + (null != options.cli)) {
    console.error('Error: At most one of --input (-i), --watch (-w), or --cli may be used.');
    process.exit(1);
  }
  if (null != options.require && !options['eval']) {
    console.error('Error: --require (-I) depends on --eval (-e)');
    process.exit(1);
  }
  if (options.minify && !(options.js || options['eval'])) {
    console.error('Error: --minify does not make sense without --js or --eval');
    process.exit(1);
  }
  if (options.bare && !(options.compile || options.js || options.sourceMap || options['eval'])) {
    console.error('Error: --bare does not make sense without --compile, --js, --source-map, or --eval');
    process.exit(1);
  }
  if (options.sourceMapFile && !options.js) {
    console.error('Error: --source-map-file depends on --js');
    process.exit(1);
  }
  if (null != options.input && fs.statSync(options.input).isDirectory() && (!(null != options.output) || (null != (cache$ = fs.statSync(options.output)) ? cache$.isFile() : void 0))) {
    console.error('Error: when --input is a directory, --output must be provided, and --output must not reference a file');
    process.exit(1);
  }
  if (options.cscodegen && !('undefined' !== typeof cscodegen && null != cscodegen)) {
    console.error('Error: cscodegen must be installed to use --cscodegen');
    return process.exit(1);
  }
};
