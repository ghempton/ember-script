// Generated by CoffeeScript 2.0.0-beta9-dev
var CoffeeScript, concat, cscodegen, escodegen, esmangle, foldl, fs, humanReadable, numberLines, Optimiser, Preprocessor, runMain, selectinputSource;
fs = require('fs');
CoffeeScript = require('./module');
Preprocessor = require('./preprocessor').Preprocessor;
Optimiser = require('./optimiser').Optimiser;
cache$ = require('./helpers');
numberLines = cache$.numberLines;
humanReadable = cache$.humanReadable;
runMain = require('./run').runMain;
cache$1 = require('./functional-helpers');
concat = cache$1.concat;
foldl = cache$1.foldl;
cscodegen = function () {
  try {
    return require('cscodegen');
  } catch (e$) {
    return;
  }
}.call(this);
escodegen = function () {
  try {
    return require('escodegen');
  } catch (e$1) {
    return;
  }
}.call(this);
esmangle = function () {
  try {
    return require('esmangle');
  } catch (e$2) {
    return;
  }
}.call(this);
selectinputSource = function (options) {
  if (null != options.input) {
    return fs.realpathSync(options.input);
  } else {
    return options.cli && '(cli)' || '(stdin)';
  }
};
module.exports = function (input, options, err) {
  var cache$2, e, fragmenter, fragments, inputName, inputSource, js, jsAST, output, preprocessed, result, sourceMap, sourceMappingUrl;
  if (null != err)
    throw err;
  result = null;
  inputName = null != options.input ? options.input : options.cli && 'cli' || 'stdin';
  inputSource = selectinputSource(options);
  input = input.toString();
  if (65279 === input.charCodeAt(0))
    input = input.slice(1);
  if (options.debug)
    try {
      console.error('### PREPROCESSED CS ###');
      preprocessed = Preprocessor.process(input, { literate: options.literate });
      console.error(numberLines(humanReadable(preprocessed)));
    } catch (e$3) {
    }
  if (options.fragmented) {
    fragmenter = require('./cli-fragmenter');
    fragments = fragmenter(input);
    options.parts = { prepend: fragments.js };
    output = require('./cli-output')(options);
    input = fragments.ember;
  } else {
    output = require('./cli-output')('', options);
  }
  try {
    result = CoffeeScript.parse(input, {
      optimise: false,
      raw: options.raw || options.sourceMap || options.sourceMapFile || options['eval'],
      inputSource: inputSource,
      literate: options.literate
    });
  } catch (e$4) {
    e = e$4;
    console.error(e.message);
    process.exit(1);
  }
  if (options.debug && options.optimise && null != result) {
    console.error('### PARSED CS-AST ###');
    console.error(inspect(result.toBasicObject()));
  }
  if (options.optimise && null != result)
    result = Optimiser.optimise(result);
  if (options.parse)
    if (null != result) {
      output(inspect(result.toBasicObject()));
      return;
    } else {
      process.exit(1);
    }
  if (options.debug && null != result) {
    console.error('### ' + (options.optimise ? 'OPTIMISED' : 'PARSED') + ' CS-AST ###');
    console.error(inspect(result.toBasicObject()));
  }
  if (options.cscodegen) {
    try {
      result = cscodegen.generate(result);
    } catch (e$5) {
      e = e$5;
      console.error(e.stack || e.message);
      process.exit(1);
    }
    if (null != result) {
      output(result);
      return;
    } else {
      process.exit(1);
    }
  }
  jsAST = CoffeeScript.compile(result, { bare: options.bare });
  if (options.compile)
    if (null != jsAST) {
      output(inspect(jsAST));
      return;
    } else {
      process.exit(1);
    }
  if (options.debug && null != jsAST) {
    console.error('### COMPILED JS-AST ###');
    console.error(inspect(jsAST));
  }
  if (options.minify)
    try {
      jsAST = esmangle.mangle(esmangle.optimize(jsAST), { destructive: true });
    } catch (e$6) {
      e = e$6;
      console.error(e.stack || e.message);
      process.exit(1);
    }
  if (options.sourceMap) {
    try {
      sourceMap = CoffeeScript.sourceMap(jsAST, inputName, { compact: options.minify });
    } catch (e$7) {
      e = e$7;
      console.error(e.stack || e.message);
      process.exit(1);
    }
    if (null != sourceMap) {
      output('' + sourceMap);
      return;
    } else {
      process.exit(1);
    }
  }
  try {
    cache$2 = CoffeeScript.jsWithSourceMap(jsAST, inputName, { compact: options.minify });
    js = cache$2.code;
    sourceMap = cache$2.map;
    cache$2;
  } catch (e$8) {
    e = e$8;
    console.error(e.stack || e.message);
    process.exit(1);
  }
  if (options.js) {
    if (options.sourceMapFile) {
      fs.writeFileSync(options.sourceMapFile, '' + sourceMap);
      sourceMappingUrl = options.output ? path.relative(path.dirname(options.output), options.sourceMapFile) : options.sourceMapFile;
      js = '' + js + '\n\n//# sourceMappingURL=' + sourceMappingUrl + '';
    }
    output(js);
    return;
  }
  if (options['eval']) {
    CoffeeScript.register();
    process.argv = [
      process.argv[1],
      options.input
    ].concat(additionalArgs);
    runMain(input, js, jsAST, inputSource);
    return;
  }
};
