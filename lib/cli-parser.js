// Generated by CoffeeScript 2.0.0-beta9-dev
var CoffeeScript, cscodegen, escodegen, esmangle, Optimiser;
CoffeeScript = require('./module');
Optimiser = require('./optimiser').Optimiser;
cscodegen = function () {
  try {
    return require('cscodegen');
  } catch (e$) {
    return;
  }
}.call(this);
escodegen = function () {
  try {
    return require('escodegen');
  } catch (e$1) {
    return;
  }
}.call(this);
esmangle = function () {
  try {
    return require('esmangle');
  } catch (e$2) {
    return;
  }
}.call(this);
module.exports = function (inputObj, output, options) {
  var e, input, inputSource, jsAST, result, sourceMap;
  inputSource = inputObj.inputSource;
  input = inputObj.input;
  try {
    result = CoffeeScript.parse(input, {
      optimise: false,
      raw: options.raw || options.sourceMap || options.sourceMapFile || options['eval'],
      inputSource: inputSource,
      literate: options.literate
    });
  } catch (e$3) {
    e = e$3;
    console.error(e.message);
    process.exit(1);
  }
  if (options.debug && options.optimise && null != result) {
    console.error('### PARSED CS-AST ###');
    console.error(inspect(result.toBasicObject()));
  }
  if (options.optimise && null != result)
    result = Optimiser.optimise(result);
  if (options.parse)
    if (null != result) {
      output(inspect(result.toBasicObject()));
      return;
    } else {
      process.exit(1);
    }
  if (options.debug && null != result) {
    console.error('### ' + (options.optimise ? 'OPTIMISED' : 'PARSED') + ' CS-AST ###');
    console.error(inspect(result.toBasicObject()));
  }
  if (options.cscodegen) {
    try {
      result = cscodegen.generate(result);
    } catch (e$4) {
      e = e$4;
      console.error(e.stack || e.message);
      process.exit(1);
    }
    if (null != result) {
      output(result);
      return;
    } else {
      process.exit(1);
    }
  }
  jsAST = CoffeeScript.compile(result, { bare: options.bare });
  if (options.compile)
    if (null != jsAST) {
      output(inspect(jsAST));
      return { jsAST: jsAST };
    } else {
      process.exit(1);
    }
  if (options.debug && null != jsAST) {
    console.error('### COMPILED JS-AST ###');
    console.error(inspect(jsAST));
  }
  if (options.minify)
    try {
      jsAST = esmangle.mangle(esmangle.optimize(jsAST), { destructive: true });
    } catch (e$5) {
      e = e$5;
      console.error(e.stack || e.message);
      process.exit(1);
    }
  if (options.sourceMap) {
    try {
      sourceMap = CoffeeScript.sourceMap(jsAST, inputName, { compact: options.minify });
    } catch (e$6) {
      e = e$6;
      console.error(e.stack || e.message);
      process.exit(1);
    }
    if (null != sourceMap) {
      output('' + sourceMap);
      return {
        sourceMap: sourceMap,
        jsAST: jsAST
      };
    } else {
      return process.exit(1);
    }
  }
};
